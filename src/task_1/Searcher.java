package task_1;

import java.io.File;

import java.io.FileNotFoundException;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Arrays;
import java.util.Scanner;

public class Searcher {

	public static void main(String[] args) throws FileNotFoundException {
		// TODO Auto-generated method stub
		Searcher searcher = new Searcher();
		searcher.index(new File("twitter.csv"));
		System.out.println(searcher.query("side effects Malaria", "COVID vaccines")); // no results
		System.out.println(searcher.query("side effect Malaria", "COVID vaccine")); // no results
		System.out.println(searcher.query("side effects Malaria", "COVID vaccine")); // results: [1395486226216628225,
																						// 1414233129129238532,
																						// 1419334582206410759]

		// 1395486226216628225 @lisaebasa Lisa ‚úç Content Writer These Covid vaccine side
		// effects are no joke. I'm here feeling like I have serious malaria
		// 1414233129129238532 @10DY3 Rey Covid vaccine side effects are not cute. Ni
		// mvela malaria malaria ü•¥
		// 1419334582206410759 @adamselzer Adam Selzer | ◊ê◊ì◊ù ‚ÄúEric Clapton said he had
		// side effects from the vaccine; I‚Äôll just take my chances with Covid.‚Äù - some
		// guy on my facebook[NEWLINE][NEWLINE]‚ÄúThat‚Äôs like to say if you got a cold,
		// take a shot of malaria.‚Äù - Bob Dylan, 1962

		System.out.println(searcher.query("side effect Malaria", "COVID vaccines")); // no results

		// "show me tweets of people who talk about the side effects of malaria and
		// COVID vaccines" as in "side effects of malaria" and/or "side effects of COVID
		// vaccines"
		System.out.println(searcher.query("side effects", "Malaria"));
		// [1367971503573266434, 1369013217893232641,
		// 1369714948578938880, 1369721990261714947,
		// 1378019116808871940, 1379866604758986756,
		// 1379881379522080773, 1386096414888022022,
		// 1389623222509965319, 1390558543892340736,
		// 1395486226216628225, 1397279306720718849,
		// 1397279672623419396, 1399832966541496322,
		// 1400817309644734464, 1401564123960250369,
		// 1402005689589960708, 1412836299254415364,
		// 1414233129129238532, 1419334582206410759,
		// 1422297273573285890, 1425137761103851524,
		// 1425228681803304960, 1429372699969720320,
		// 1431327734660308996, 1432091029252059138,
		// 1437533029409464323, 1440771791778029568]

		System.out.println(searcher.query("side effect", "Malaria"));
		// [1348965245646204928, 1353800682965446656,
		// 1374093998139305985, 1375210663493128205,
		// 1379881379522080773, 1408115547066224650,
		// 1423777060841996291]
		System.out.println(searcher.query("side effects", "COVID vaccines"));
		// [1345519179525464065, 1356390570105610241, 1359009146398408705,
		// 1362456146389385221, 1364724700593721351, 1371534745809547264,
		// 1372772796346998784, 1373720332146778113, 1375446942256271367,
		// 1377703250946760707, 1379903590941134850, 1382514072223031306,
		// 1383026939603091456, 1386468881082970112, 1388279455693643783,
		// 1390811852729290752, 1391542129957249028, 1396138553512501258,
		// 1397506903064956929, 1401890664380461056, 1403864293322506240,
		// 1405551171670994947, 1405613950700457989, 1407848810802462723,
		// 1408210345420738563, 1408500961665064976, 1409659378110660608,
		// 1411471789482418177, 1412922374006136833, 1414733987017285636,
		// 1416137465740644355, 1416182247892393987, 1417845198512607234,
		// 1417972041089757192, 1418402997521031172, 1419133218675216389,
		// 1422965727925919749, 1423082761825443841, 1423423589261340672,
		// 1423432518003396615, 1425826157832728587, 1427186264349024257,
		// 1427418107866345475, 1428143461144928256, 1436489048185573403,
		// 1438250839332823043, 1440374772555149323, 1442263171440332800,
		// 1443001148739362819]
		System.out.println(searcher.query("side effect", "COVID vaccines"));
		// [1348056424790704130,
		// 1365327164514570240,
		// 1366899937070379009,
		// 1377813802100654080,
		// 1379452885168177152,
		// 1384539272615661568,
		// 1386380760668585989,
		// 1391108801260974080,
		// 1419083543704178693,
		// 1422700081875128320,
		// 1433839735924006924,
		// 1442263171440332800]
		System.out.println(searcher.query("side effects", "COVID vaccine"));
		// [1345519179525464065, 1345821380944785408, 1346194207153782784,
		// 1346215739917819904, 1346236432424189952, 1346606359647821824,
		// 1347694332292313090, 1348054825678737408, 1348055375786995714,
		// 1348418567369355264, 1348789931301367809, 1349107569378390016,
		// 1349143983759491072, 1349867511223869443, 1350231068457250818,
		// 1350591891256049671, 1352015798349537281, 1352404610963660806,
		// 1353130254542516226, 1353492620882960385, 1353492727305039875,
		// 1355303731164815361, 1356022735349161992, 1356023000064274433,
		// 1356654201930194954, 1357477028379975682, 1357839402429337601,
		// 1358201255227576320, 1358711528745222146, 1359230708477284355,
		// 1359288420296765441, 1359368194872414209, 1359652144891240448,
		// 1360004269500473347, 1360376537900482564, 1360425996562931712,
		// 1361463885446975493, 1361807896309334016, 1361826046425911297,
		// 1362189880986537985, 1362213208363204613, 1362552349424644097,
		// 1362815882968326147, 1363234073620086790, 1363270856202465280,
		// 1363637630487973890, 1363637782787158020, 1363639492825989120,
		// 1363921513217478659, 1364001488276660224, 1365046826236334087,
		// 1365451012408897536, 1365805531542155264, 1366169590192082944,
		// 1366173495365951493, 1366399986527830025, 1367067744303280129,
		// 1367262605220274186, 1367262827069726721, 1367946720353599490,
		// 1367975807025569797, 1368298699563098115, 1368591620052951043,
		// 1368711813806895112, 1369368734394114050, 1369375518240440324,
		// 1369429561025437698, 1369799142298415108, 1369818308028010499,
		// 1370098619605467140, 1370524437959864329, 1370532423386152967,
		// 1370779810235092994, 1370802165590147078, 1370885133994188803,
		// 1370886143336665089, 1371530036474478599, 1371534745809547264,
		// 1371611711086718976, 1372331183695085571, 1372697167085719559,
		// 1372698705623588866, 1372699177940000772, 1373042225735688193,
		// 1373396995746975748, 1373422752565239814, 1373785489422090243,
		// 1373785855597350918, 1374791874729410560, 1374872450387779588,
		// 1375235498260758533, 1375274601983381505, 1375597321573036034,
		// 1375968467560587264, 1376684206219223040, 1376768591178166272,
		// 1377047085833363459, 1377349009883373569, 1377403338094899200,
		// 1377408486884003840, 1377409378844741633, 1377766504012386311,
		// 1377772657408671745, 1379458863641075713, 1379571777991417857,
		// 1379581550996697094, 1379584166526877700, 1379850331631185931,
		// 1379903590941134850, 1379904584278106116, 1380458447192264704,
		// 1380598882762100741, 1380640527461285890, 1380640617496252422,
		// 1380669736866832384, 1380670381560893440, 1380670573315907588,
		// 1380671706310791170, 1381033584664924162, 1381338519533187074,
		// 1381373747605741569, 1381639907911720962, 1381730587095015425,
		// 1381730917924888584, 1381735469046583299, 1381756953991450625,
		// 1382093993593479169, 1382120954764087300, 1382121301972762625,
		// 1382383620321538057, 1382482935270477824, 1382643173147746305,
		// 1382658478926356480, 1382716247675129856, 1382777661509013515,
		// 1382841298382651395, 1382845429004443648, 1383203759807946761,
		// 1383208037758898178, 1383808952614285318, 1383835387005521923,
		// 1383931303003779072, 1383932109195137028, 1383932825611640832,
		// 1383933158035365895, 1384117028626210820, 1384294002011242508,
		// 1384295515425107970, 1384598952763297793, 1384652304649965569,
		// 1384652334093979649, 1384656227737628676, 1384937359108710400,
		// 1384949119739904001, 1385352533074452481, 1385353296345542659,
		// 1385358538575339521, 1385366960809160712, 1385369924248481799,
		// 1385446358350540802, 1386025117411643392, 1386388359220666368,
		// 1386442947202363392, 1386468925932675072, 1386469143197757450,
		// 1386484943941931009, 1387885952505421833, 1387911135760953345,
		// 1387918916077461505, 1388258740026200068, 1388281757343027200,
		// 1388993543931367432, 1389367496805867520, 1389729634334486528,
		// 1389730062597902338, 1390067932881952774, 1390246374499917828,
		// 1390811852729290752, 1391541882157735938, 1391542129957249028,
		// 1392180596676440069, 1392233293307944968, 1392601584530567172,
		// 1392796949095632896, 1392990277292462081, 1392990538706661377,
		// 1393328023277998080, 1393352242418356226, 1393354835060314114,
		// 1394440150533476360, 1394441109435076610, 1394442583015837702,
		// 1394804770267881474, 1395091615283286017, 1395338822695538691,
		// 1395474090895593478, 1395486226216628225, 1395529577192173569,
		// 1395815875228442626, 1396138553512501258, 1396616924499529730,
		// 1397340295889522688, 1397340671913054209, 1397341527257518082,
		// 1397606154222678024, 1397650330158911495, 1398064269577506817,
		// 1398065415335690240, 1398065951661170688, 1399451655196839938,
		// 1399828659872075776, 1399836706338189312, 1400150122353287171,
		// 1400176719948963840, 1401651253403394053, 1401689361096142852,
		// 1401690341397385217, 1401853901586976770, 1401890664380461056,
		// 1402042769498116101, 1402412327954128899, 1402712939128295424,
		// 1402767832224522242, 1402775559730384896, 1402777461889245185,
		// 1403047842642546696, 1403139220395462659, 1403499670282723332,
		// 1403988305138622470, 1404555570766565378, 1404794892451205126,
		// 1405231185941385217, 1405654583519625217, 1405839933009547267,
		// 1406663767962832898, 1406734840637034507, 1406761515101962240,
		// 1406876345745936384, 1407085673656504320, 1407847680919826432,
		// 1408055472373047298, 1408210345420738563, 1410022906067931136,
		// 1410384535800352768, 1411467465498918913, 1411471789482418177,
		// 1412532987170902022, 1412923626337099776, 1413052926365421571,
		// 1413647873405767686, 1413778762999681026, 1414233129129238532,
		// 1414700075641675776, 1414727497867046916, 1414733876862365700,
		// 1414733987017285636, 1415061902053490688, 1415096117566623744,
		// 1415822364323958786, 1416124540053245963, 1417221175953043456,
		// 1417272316317245442, 1417272557842087942, 1417493369983574026,
		// 1417539455863476226, 1417559516703596546, 1417632881720143873,
		// 1417634209863282689, 1417635102008487937, 1417972041089757192,
		// 1418462227481473024, 1419334582206410759, 1419445579655094275,
		// 1420017494895570951, 1420170528355201028, 1420363339432185861,
		// 1420534487444766722, 1420894977152876549, 1421028271576305674,
		// 1421186532036198402, 1421982022231339011, 1421983226780950530,
		// 1422170556917592068, 1422346088296615944, 1422965727925919749,
		// 1423061797817380866, 1423071109495377928, 1423423589261340672,
		// 1424086978773938179, 1424517976967892998, 1424520393449115651,
		// 1424882403844239361, 1424914129979002881, 1425243823622459392,
		// 1425379503015145511, 1425452200558534659, 1425505965772877837,
		// 1425601385018580992, 1425606661557784582, 1425715470687219712,
		// 1425964529318461441, 1426299081882849287, 1426299438390288387,
		// 1426692592272429056, 1427056184117260288, 1427186264349024257,
		// 1427732589331288067, 1427770591457730564, 1428076045400514563,
		// 1428410883957477377, 1428868591902883840, 1429523540672491521,
		// 1429812057814282248, 1429955118355697673, 1429955309661941791,
		// 1429972811783802885, 1430679998231420929, 1430958933951217664,
		// 1431042943566041090, 1431394308624551943, 1431626671124328451,
		// 1431679279830638599, 1431767343353454595, 1432436137444970498,
		// 1433513063890800643, 1433558619920891907, 1434604204241219586,
		// 1434666647374245894, 1434865195235479559, 1435027166086025219,
		// 1435103108670001155, 1437455202106417152, 1437564881893535749,
		// 1437566294317051910, 1437829931451383810, 1438155678263173125,
		// 1438180495221739524, 1438289188722511872, 1439242043562381314,
		// 1443291841806409728, 1443726260564267009]
		System.out.println(searcher.query("side effect", "COVID vaccine"));
		// [1345916384623042567, 1346000403163357189, 1348021085388693504,
		// 1349143002795679746, 1349143751193751554, 1353854303061110784,
		// 1354878082281304066, 1357841014883500032, 1358201307031601152,
		// 1358818077324967949, 1360004269500473347, 1360718950430961666,
		// 1361464407021281285, 1364936176210235392, 1365327164514570240,
		// 1365356475091013634, 1365430902856314885, 1365450423524601858,
		// 1365699377889705987, 1365765330149273607, 1365805020587909123,
		// 1366455534484918273, 1366899937070379009, 1366913512560156674,
		// 1367565667118022661, 1367985309712084997, 1369330030086660097,
		// 1370113971483709440, 1371091320966635521, 1371973881834008583,
		// 1374873330612895747, 1375117659419897856, 1377046164428574721,
		// 1377047902648987649, 1377656547023671297, 1378109426784202754,
		// 1378495372599963652, 1379583366299811842, 1379583607610568705,
		// 1381313156107100163, 1381757435048718341, 1383206132865495040,
		// 1383545118347517953, 1383933185097027591, 1384294703789531140,
		// 1384539272615661568, 1384658526933422081, 1385744080110559232,
		// 1386831510813089792, 1387194651883544579, 1387569134259609603,
		// 1388279662959218689, 1389731243135275010, 1391108801260974080,
		// 1393352260516814848, 1394049702233055232, 1394598231905030169,
		// 1394803087169048576, 1395091615283286017, 1395845649711747075,
		// 1397339371301269505, 1401312563833434113, 1401321825397874691,
		// 1402777461889245185, 1404739240131383296, 1404951384538165256,
		// 1410000867181285377, 1411458784375951362, 1411757666976755716,
		// 1412913108457250816, 1414727497867046916, 1416477846537637888,
		// 1418462227481473024, 1419768467008507904, 1422346088296615944,
		// 1425244467204743172, 1425601385018580992, 1425606291595038727,
		// 1431678353937928196, 1432363225841119232, 1433429479284559872,
		// 1433839735924006924, 1434202107347931137, 1434908678826647552,
		// 1438652854298812419, 1443364473499176963]

		// "show me tweets of people who talk about the side effects of malaria and
		// COVID vaccines" as in "side effects of malaria vaccines" and/or "side effects
		// of COVID vaccines"
		System.out.println(searcher.query("side effects", "Malaria vaccines")); // no results
		System.out.println(searcher.query("side effect", "Malaria vaccines")); // [1423777060841996291]
		// 1423777060841996291 @kobebaffour kobe. one possible side effect from the
		// pandemic: vaccines improving dramatically [NEWLINE][NEWLINE]wouldn't mind a
		// vaccine for hiv, all the std's, malaria, and whatever else is stewing in the
		// fabric of the earth.
		System.out.println(searcher.query("side effects", "Malaria vaccine"));
		// [1367971503573266434, 1369013217893232641, 1369714948578938880,
		// 1369721990261714947, 1378019116808871940, 1395486226216628225,
		// 1414233129129238532, 1419334582206410759, 1422297273573285890,
		// 1425137761103851524, 1425228681803304960]
		System.out.println(searcher.query("side effect", "Malaria vaccine")); // [1374093998139305985, 1423777060841996291]
		//1374093998139305985	@Jarushub	Suraj Oyewale (Jarus)	AstraZeneca Vaccine "side effect" so far based on personal experience( didn't start until like 8 hrs after the jab, like someone hinted here) [NEWLINE][NEWLINE]- headache [NEWLINE]- weakness [NEWLINE]- appetite only for soft food like banana, food[NEWLINE][NEWLINE]Similar to feeling when hit with heavy malaria + serious hunger
		//1423777060841996291	@kobebaffour	kobe.	one possible side effect from the pandemic: vaccines improving dramatically [NEWLINE][NEWLINE]wouldn't mind a vaccine for hiv, all the std's, malaria, and whatever else is stewing in the fabric of the earth.

	}

	HashMap<String, DictEntry> dictonary = new HashMap<String, DictEntry>();
	ArrayList<ArrayList<Long>> postingsLists = new ArrayList<ArrayList<Long>>();

	public void index(File file) throws FileNotFoundException {
		int n = 0;

		Scanner scanner = new Scanner(file);
		long time = System.nanoTime();

		// if you want to search only the first n terms
		while (scanner.hasNext() && (n < 30000000)) {
			n++;
			if (n % 10000 == 0) {
				System.out.println(n);
			}
			String line = scanner.nextLine();
			String[] columns = line.split("	"); // special whitespace
			// this check is here because of line 2114543, 4115522, 4357319, 4577422,
			// 5520503, 6437018, 6437019, 6512362, 7185729 in the input file which are
			// incorrectly
			// formated
			if (columns.length < 4) {
				System.out.println(columns.length + " " + n);
				continue;
			}
			long id = Long.parseLong(columns[0]);
			String[] tokens = normalize(columns[3]).split(" ");

			// some tweets are multiple times in the input csv. If we detect such a double
			// we dont add it a second time.

			for (String token : tokens) {
				if (token.strip().length() != 0) {
					this.add(token, id); // this takes by far the most time;
				}

			}

		}
		System.out.println();
		System.out.println((System.nanoTime() - time) / (double) 1000000000);
		scanner.close();

//		for (DictEntry entry : dictonary) {
//			System.out.println(entry.term + " " + entry.frequency + " " + entry.postingListPos);
//		}

	}

	public String normalize(String text) {
		return text.replace("[NEWLINE]", " ").replace("[TAB]", " ").replace(".", " ").replace(",", " ")
				.replace(";", " ").replace("‚Äô", "'").replace("\"", " ").replace("‚Äù", " ").replace("!", " ")
				.replace(":", " ").replace("‚Äú", " ").toLowerCase().strip();
	}

	public void add(String token, long id) {

		if (!dictonary.containsKey(token)) { // 0.0563824 whole loop
			dictonary.put(token, new DictEntry(1, makePostingsList(id)));
			return;
		}

		int postingListPos = dictonary.get(token).postingListPos; // 0.0667442
		ArrayList<Long> postings = postingsLists.get(postingListPos); // 0.1953765
		// !postings.contains(id)
		// 8.453592 whole loop with !postings.contains(id), 1.2163975 with
		// (Collections.binarySearch(postings, id) < 0)

		int postingPosition = Collections.binarySearch(postings, id);
		if (postingPosition < 0) { // 8.453592 whole loop with
			dictonary.get(token).frequency++; // 0.0759479
			postings.add(-postingPosition - 1, id);
		}

	}

	@SuppressWarnings("serial")
	private int makePostingsList(long id) {
		postingsLists.add(new ArrayList<Long>() {
			{
				add(id);
			}
		});

		// TODO Auto-generated method stub
		return postingsLists.size() - 1;
	}

	public class DictEntry {
		public int frequency;
		public int postingListPos;

		public DictEntry(int frequency, int postingListPos) {
			this.frequency = frequency;
			this.postingListPos = postingListPos;
		}

	}

	public ArrayList<Long> query(String term) {
		String[] splitTerm = term.split(" ");
		if (splitTerm.length > 1) {
			return query(Arrays.asList(term.split(" ")));
		}
		int position = dictonary.get(normalize(term)).postingListPos;
		// System.out.println(position);
		if (position >= 0) {
			return postingsLists.get(position);
		}
		return new ArrayList<Long>();
	}

	public ArrayList<Long> query(String term1, String term2) {
		ArrayList<String> queryList = new ArrayList<String>();
		queryList.addAll(Arrays.asList(term1.split(" ")));
		queryList.addAll(Arrays.asList(term2.split(" ")));
		System.out.println(queryList);
		return query(queryList);
	}

	public ArrayList<Long> query(List<String> terms) {
		List<String> tempList = terms;
		switch (tempList.size()) {
		case 0:
			return new ArrayList<Long>();
		case 1:
			return query(tempList.remove(0));
		case 2:
			return intersect(query(tempList.remove(0)), query(tempList.remove(0)));
		default:
			String term0 = tempList.remove(0);
			return intersect(query(term0), query(tempList));
		}
	}

	public ArrayList<Long> intersect(ArrayList<Long> list1, ArrayList<Long> list2) {
		Iterator<Long> list1Iterator = list1.iterator();
		Iterator<Long> list2Iterator = list2.iterator();
		ArrayList<Long> intersection = new ArrayList<Long>();

		if (!list1Iterator.hasNext() || !list2Iterator.hasNext()) {
			return intersection;
		}

		long posting1 = list1Iterator.next();
		long posting2 = list2Iterator.next();

		while (true) {
			// System.out.println(posting1 + " " + posting2);

			if (posting1 == posting2) {
				intersection.add(posting1);
				if (list1Iterator.hasNext()) {
					posting1 = list1Iterator.next();
				} else {
					break;
				}
				if (list2Iterator.hasNext()) {
					posting2 = list2Iterator.next();
				} else {
					break;
				}
			}
			if (posting1 < posting2) {
				if (list1Iterator.hasNext()) {
					posting1 = list1Iterator.next();
					continue;
				} else {
					break;
				}
			}
			if (posting1 > posting2) {
				if (list2Iterator.hasNext()) {
					posting2 = list2Iterator.next();
					continue;
				} else {
					break;
				}
			}
		}

		return intersection;

	}

}
